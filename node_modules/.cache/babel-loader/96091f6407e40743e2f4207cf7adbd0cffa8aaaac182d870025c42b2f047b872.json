{"ast":null,"code":"// import React, { useState } from 'react';\n// import Modal from 'react-modal';\n// import axios from 'axios';\n// import '../App.css';\n// Modal.setAppElement('#root');\n// const TaskModal = ({ task, closeModal, updateTask }) => {\n//   const [images, setImages] = useState([]);\n//   const [dimension, setDimension] = useState(task.dimension || '');\n//   const [flow, setFlow] = useState('');\n//   const [style, setStyle] = useState('');\n//   const [manualPrompts, setManualPrompts] = useState('');\n//   const [genPerRef, setGenPerRef] = useState(0);\n//   const [text, setText] = useState('');\n//   const [gen_type, setGen_type] = useState(task.gen_type || '');\n//   const dimensionOptions = ['1x1', '9x16', '16x9'];\n//   const flowOptions = ['other_models_mix', 'mj_model'];\n//   const genTypeOptions = ['random_generation', 'cyclic_generation'];\n//   const stylesOptions = ['An ultra-realistic photography', 'Anime style'];\n//   const handleGenerate = async () => {\n//     try {\n//       const response = await axios.post('https://fasteasy-jvqis72guq-lm.a.run.app/tz-front/generate_images', {\n//         images,\n//         dimension,\n//         style,\n//         manual_prompts: manualPrompts,\n//         gen_per_ref: genPerRef,\n//         flow,\n//         text\n//       }, {\n//         auth: {\n//           username: 'renesandro',\n//           password: 'qwerty1234',\n//         },\n//       });\n//       console.log('Generated images:', response.data);\n//       const updatedTask = { ...task, dimension, gen_type,  flow, style, manual_prompts: manualPrompts, genPerRef, text };\n//       updateTask(updatedTask);\n//       closeModal();\n//     } catch (error) {\n//       console.error('Error generating images:', error);\n//     }\n//   };\n//   return (\n//     <Modal\n//       isOpen={true}\n//       onRequestClose={closeModal}\n//       contentLabel=\"Task Modal\"\n//       className=\"modal-content\"\n//       overlayClassName=\"modal-overlay\"\n//     >\n//       <div>\n//         <span className=\"close\" onClick={closeModal}>&times;</span>\n//         <h2>{task.task_name}</h2>\n//         <form>\n//           <div>\n//             <label>Text:</label>\n//             <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} />\n//           </div>\n//           <div>\n//             <label>Dimension:</label>\n//             <select value={dimension} onChange={(e) => setDimension(e.target.value)}>\n//               <option value=\"\">Select Dimension</option>\n//               {dimensionOptions.map(option => (\n//                 <option key={option} value={option}>{option}</option>\n//               ))}\n//             </select>\n//           </div>\n//           <div>\n//             <label>Flow:</label>\n//             <select value={flow} onChange={(e) => setFlow(e.target.value)}>\n//               <option value=\"\">Select Flow</option>\n//               {flowOptions.map(option => (\n//                 <option key={option} value={option}>{option}</option>\n//               ))}\n//             </select>\n//           </div>\n//           <div>\n//             <label>Manual Prompts:</label>\n//             <input type=\"text\" value={manualPrompts} onChange={(e) => setManualPrompts(e.target.value)} />\n//           </div>\n//           <div>\n//             <label>Gen Per Ref:</label>\n//             <input type=\"number\" value={genPerRef} onChange={(e) => setGenPerRef(Number(e.target.value))} />\n//           </div>\n//           <div>\n//             <label>Generation Type:</label>\n//             <select value={gen_type} onChange={(e) => setGen_type(e.target.value)}>\n//               <option value=\"\">Select Generation Type</option>\n//               {genTypeOptions.map(option => (\n//                 <option key={option} value={option}>{option}</option>\n//               ))}\n//             </select>\n//           </div>\n//           <div>\n//             <label>Style:</label>\n//             <select value={style} onChange={(e) => setStyle(e.target.value)}>\n//               <option value=\"\">Select Style</option>\n//               {stylesOptions.map(option => (\n//                 <option key={option} value={option}>{option}</option>\n//               ))}\n//             </select>\n//           </div>\n//           <button type=\"button\" onClick={handleGenerate}>Generate</button>\n//         </form>\n//       </div>\n//     </Modal>\n//   );\n// };\n// export default TaskModal;\n// const handleGenerate = async () => {\n//   try {\n//     const response = await axios.post('https://fasteasy-jvqis72guq-lm.a.run.app/tz-front/generate_images', {\n//       images: [selectedLayer],\n//       dimension,\n//       style,\n//       manual_prompts: manualPrompts,\n//       gen_per_ref: genPerRef,\n//       flow,\n//       text\n//     }, {\n//       auth: {\n//         username: 'renesandro',\n//         password: 'qwerty1234',\n//       },\n//     });\n//     console.log('Generated images:', response.data);\n//     // Оновлюємо завдання з новими даними\n//     const updatedTask = { \n//       ...task, \n//       dimension, \n//       gen_type, \n//       flow, \n//       style, \n//       manual_prompts: manualPrompts, \n//       genPerRef, \n//       text, \n//       images \n//     };\n//     updateTask(updatedTask);\n//     // Закриваємо модальне вікно\n//     closeModal();\n//   } catch (error) {\n//     console.error('Error generating images:', error);\n//     // Навіть у випадку помилки ви можете закрити модальне вікно, якщо це потрібно\n//     closeModal();\n//   }\n// };\nimport React,{useState,useEffect}from'react';import'./TaskModal.css';import{AiOutlineClose}from'react-icons/ai';import axios from'axios';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TaskModal=_ref=>{let{isOpen,onClose,task,onSave}=_ref;const[dimension,setDimension]=useState('1x1');const[flow,setFlow]=useState('other_models_mix');const[manualPrompts,setManualPrompts]=useState('');const[genPerRef,setGenPerRef]=useState(1);const[style,setStyle]=useState('An ultra-realistic photography');const[selectedImage,setSelectedImage]=useState('');const[imagePreview,setImagePreview]=useState(null);const[text,setText]=useState('');useEffect(()=>{if(task){setDimension(task.dimension||'1x1');setFlow(task.flow||'other_models_mix');setManualPrompts(task.manualPrompts||'');setGenPerRef(task.genPerRef||1);setStyle(task.style||'An ultra-realistic photography');setSelectedImage('');setImagePreview(null);}},[task]);const handleGenerate=async()=>{try{// Формуємо дані для запиту\nconst requestData={images:selectedImage?[selectedImage]:[],dimension,style,manual_prompts:manualPrompts,gen_per_ref:genPerRef,flow,text};// Виконуємо POST запит до API\nconst response=await axios.post('https://fasteasy-jvqis72guq-lm.a.run.app/tz-front/generate_images',requestData,{auth:{username:'renesandro',password:'qwerty1234'}});console.log('Generated images:',response.data);// Оновлюємо завдання із отриманими даними\nconst updatedTask={...task,dimension,flow,style,manual_prompts:manualPrompts,genPerRef,images:selectedImage?[...(task.images||[]),selectedImage]:task.images};onSave(updatedTask);// Зберігаємо оновлені дані завдання\n}catch(error){console.error('Error generating images:',error);// Оновлюємо завдання навіть у випадку помилки, щоб зберегти вибране фото\nconst updatedTask={...task,dimension,flow,style,manual_prompts:manualPrompts,genPerRef,images:selectedImage?[...(task.images||[]),selectedImage]:task.images,text};onSave(updatedTask);// Зберігаємо дані, навіть якщо API-запит не вдався\n}finally{onClose();// Закриваємо модальне вікно незалежно від результату\n}};const handleImageUpload=e=>{const file=e.target.files[0];if(file&&['image/png','image/jpg','image/jpeg'].includes(file.type)){const fileName=file.name;setSelectedImage(fileName);setImagePreview(URL.createObjectURL(file));// Generate preview\n// Update the image list and preview\nif(selectedImage&&task.images.includes(selectedImage)){const updatedImages=task.images.map(img=>img===selectedImage?fileName:img);onSave({...task,images:updatedImages});}}};const handleImageRemove=()=>{if(selectedImage){const updatedImages=(task.images||[]).filter(img=>img!==selectedImage);setSelectedImage('');setImagePreview(null);onSave({...task,images:updatedImages});}};const handleImageSelectionChange=e=>{const imageName=e.target.value;setSelectedImage(imageName);if(imageName&&task.images.includes(imageName)){setImagePreview(null);// Clear preview if an existing image is selected\n}};if(!isOpen)return null;return/*#__PURE__*/_jsx(\"div\",{className:\"modal-overlay\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"modal-content\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"modal-close\",id:\"close-modal-button\",onClick:onClose,children:/*#__PURE__*/_jsx(AiOutlineClose,{})}),/*#__PURE__*/_jsx(\"h2\",{children:task?task.task_name:'Add New Task'}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Text:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:text,onChange:e=>setText(e.target.value)})]}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"label\",{children:[\"Dimension:\",/*#__PURE__*/_jsxs(\"select\",{value:dimension,onChange:e=>setDimension(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"1x1\",children:\"1x1\"}),/*#__PURE__*/_jsx(\"option\",{value:\"9x16\",children:\"9x16\"}),/*#__PURE__*/_jsx(\"option\",{value:\"16x9\",children:\"16x9\"})]})]})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"label\",{children:[\"Flow:\",/*#__PURE__*/_jsxs(\"select\",{value:flow,onChange:e=>setFlow(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"other_models_mix\",children:\"Other Models Mix\"}),/*#__PURE__*/_jsx(\"option\",{value:\"mj_model\",children:\"MJ Model\"})]})]})}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Select Image Layer:\",/*#__PURE__*/_jsxs(\"select\",{value:selectedImage||'',onChange:handleImageSelectionChange,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"New image\"}),(task.images||[]).map((image,index)=>/*#__PURE__*/_jsx(\"option\",{value:image,children:image},index))]})]}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",accept:\".png,.jpg,.jpeg\",onChange:handleImageUpload}),selectedImage&&/*#__PURE__*/_jsxs(\"div\",{className:\"image-preview\",children:[imagePreview&&/*#__PURE__*/_jsx(\"img\",{src:imagePreview,alt:\"Selected\",className:\"preview-box\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleImageRemove,children:\"Remove Image\"})]})]}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"label\",{children:[\"Manual Prompts:\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"textarea\",{value:manualPrompts,onChange:e=>setManualPrompts(e.target.value)})]})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"label\",{children:[\"Generatios per ref:\",/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:genPerRef,onChange:e=>setGenPerRef(Number(e.target.value))})]})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"label\",{children:[\"Style:\",/*#__PURE__*/_jsxs(\"select\",{value:style,onChange:e=>setStyle(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"An ultra-realistic photography\",children:\"An ultra-realistic photography\"}),/*#__PURE__*/_jsx(\"option\",{value:\"Anime style\",children:\"Anime style\"})]})]})}),/*#__PURE__*/_jsx(\"button\",{onClick:handleGenerate,children:\"Generate\"})]})});};export default TaskModal;","map":{"version":3,"names":["React","useState","useEffect","AiOutlineClose","axios","jsx","_jsx","jsxs","_jsxs","TaskModal","_ref","isOpen","onClose","task","onSave","dimension","setDimension","flow","setFlow","manualPrompts","setManualPrompts","genPerRef","setGenPerRef","style","setStyle","selectedImage","setSelectedImage","imagePreview","setImagePreview","text","setText","handleGenerate","requestData","images","manual_prompts","gen_per_ref","response","post","auth","username","password","console","log","data","updatedTask","error","handleImageUpload","e","file","target","files","includes","type","fileName","name","URL","createObjectURL","updatedImages","map","img","handleImageRemove","filter","handleImageSelectionChange","imageName","value","className","children","id","onClick","task_name","onChange","image","index","accept","src","alt","Number"],"sources":["/Users/mmaksim/test-ex/src/components/TaskModal.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import Modal from 'react-modal';\n// import axios from 'axios';\n// import '../App.css';\n\n// Modal.setAppElement('#root');\n\n// const TaskModal = ({ task, closeModal, updateTask }) => {\n//   const [images, setImages] = useState([]);\n//   const [dimension, setDimension] = useState(task.dimension || '');\n//   const [flow, setFlow] = useState('');\n//   const [style, setStyle] = useState('');\n//   const [manualPrompts, setManualPrompts] = useState('');\n//   const [genPerRef, setGenPerRef] = useState(0);\n//   const [text, setText] = useState('');\n//   const [gen_type, setGen_type] = useState(task.gen_type || '');\n\n//   const dimensionOptions = ['1x1', '9x16', '16x9'];\n//   const flowOptions = ['other_models_mix', 'mj_model'];\n//   const genTypeOptions = ['random_generation', 'cyclic_generation'];\n//   const stylesOptions = ['An ultra-realistic photography', 'Anime style'];\n\n//   const handleGenerate = async () => {\n//     try {\n//       const response = await axios.post('https://fasteasy-jvqis72guq-lm.a.run.app/tz-front/generate_images', {\n//         images,\n//         dimension,\n//         style,\n//         manual_prompts: manualPrompts,\n//         gen_per_ref: genPerRef,\n//         flow,\n//         text\n//       }, {\n//         auth: {\n//           username: 'renesandro',\n//           password: 'qwerty1234',\n//         },\n//       });\n//       console.log('Generated images:', response.data);\n\n//       const updatedTask = { ...task, dimension, gen_type,  flow, style, manual_prompts: manualPrompts, genPerRef, text };\n//       updateTask(updatedTask);\n\n//       closeModal();\n//     } catch (error) {\n//       console.error('Error generating images:', error);\n//     }\n//   };\n  \n\n//   return (\n//     <Modal\n//       isOpen={true}\n//       onRequestClose={closeModal}\n//       contentLabel=\"Task Modal\"\n//       className=\"modal-content\"\n//       overlayClassName=\"modal-overlay\"\n//     >\n//       <div>\n//         <span className=\"close\" onClick={closeModal}>&times;</span>\n//         <h2>{task.task_name}</h2>\n//         <form>\n//           <div>\n//             <label>Text:</label>\n//             <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} />\n//           </div>\n//           <div>\n//             <label>Dimension:</label>\n//             <select value={dimension} onChange={(e) => setDimension(e.target.value)}>\n//               <option value=\"\">Select Dimension</option>\n//               {dimensionOptions.map(option => (\n//                 <option key={option} value={option}>{option}</option>\n//               ))}\n//             </select>\n//           </div>\n//           <div>\n//             <label>Flow:</label>\n//             <select value={flow} onChange={(e) => setFlow(e.target.value)}>\n//               <option value=\"\">Select Flow</option>\n//               {flowOptions.map(option => (\n//                 <option key={option} value={option}>{option}</option>\n//               ))}\n//             </select>\n//           </div>\n//           <div>\n//             <label>Manual Prompts:</label>\n//             <input type=\"text\" value={manualPrompts} onChange={(e) => setManualPrompts(e.target.value)} />\n//           </div>\n//           <div>\n//             <label>Gen Per Ref:</label>\n//             <input type=\"number\" value={genPerRef} onChange={(e) => setGenPerRef(Number(e.target.value))} />\n//           </div>\n//           <div>\n//             <label>Generation Type:</label>\n//             <select value={gen_type} onChange={(e) => setGen_type(e.target.value)}>\n//               <option value=\"\">Select Generation Type</option>\n//               {genTypeOptions.map(option => (\n//                 <option key={option} value={option}>{option}</option>\n//               ))}\n//             </select>\n//           </div>\n//           <div>\n//             <label>Style:</label>\n//             <select value={style} onChange={(e) => setStyle(e.target.value)}>\n//               <option value=\"\">Select Style</option>\n//               {stylesOptions.map(option => (\n//                 <option key={option} value={option}>{option}</option>\n//               ))}\n//             </select>\n//           </div>\n//           <button type=\"button\" onClick={handleGenerate}>Generate</button>\n//         </form>\n//       </div>\n//     </Modal>\n//   );\n// };\n\n// export default TaskModal;\n\n\n\n\n\n\n\n\n\n\n\n// const handleGenerate = async () => {\n//   try {\n//     const response = await axios.post('https://fasteasy-jvqis72guq-lm.a.run.app/tz-front/generate_images', {\n//       images: [selectedLayer],\n//       dimension,\n//       style,\n//       manual_prompts: manualPrompts,\n//       gen_per_ref: genPerRef,\n//       flow,\n//       text\n//     }, {\n//       auth: {\n//         username: 'renesandro',\n//         password: 'qwerty1234',\n//       },\n//     });\n//     console.log('Generated images:', response.data);\n\n//     // Оновлюємо завдання з новими даними\n//     const updatedTask = { \n//       ...task, \n//       dimension, \n//       gen_type, \n//       flow, \n//       style, \n//       manual_prompts: manualPrompts, \n//       genPerRef, \n//       text, \n//       images \n//     };\n//     updateTask(updatedTask);\n\n//     // Закриваємо модальне вікно\n//     closeModal();\n//   } catch (error) {\n//     console.error('Error generating images:', error);\n\n//     // Навіть у випадку помилки ви можете закрити модальне вікно, якщо це потрібно\n//     closeModal();\n//   }\n// };\n\n\n\n\n\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './TaskModal.css';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport axios from 'axios';\n\nconst TaskModal = ({ isOpen, onClose, task, onSave }) => {\n  const [dimension, setDimension] = useState('1x1');\n  const [flow, setFlow] = useState('other_models_mix');\n  const [manualPrompts, setManualPrompts] = useState('');\n  const [genPerRef, setGenPerRef] = useState(1);\n  const [style, setStyle] = useState('An ultra-realistic photography');\n  const [selectedImage, setSelectedImage] = useState('');\n  const [imagePreview, setImagePreview] = useState(null);\n  const [text, setText] = useState('');\n\n  useEffect(() => {\n    if (task) {\n      setDimension(task.dimension || '1x1');\n      setFlow(task.flow || 'other_models_mix');\n      setManualPrompts(task.manualPrompts || '');\n      setGenPerRef(task.genPerRef || 1);\n      setStyle(task.style || 'An ultra-realistic photography');\n      setSelectedImage('');\n      setImagePreview(null);\n    }\n  }, [task]);\n\n\n\nconst handleGenerate = async () => {\n  try {\n    // Формуємо дані для запиту\n    const requestData = {\n      images: selectedImage ? [selectedImage] : [],\n      dimension,\n      style,\n      manual_prompts: manualPrompts,\n      gen_per_ref: genPerRef,\n      flow,\n      text\n    };\n\n    // Виконуємо POST запит до API\n    const response = await axios.post('https://fasteasy-jvqis72guq-lm.a.run.app/tz-front/generate_images', requestData, {\n      auth: {\n        username: 'renesandro',\n        password: 'qwerty1234',\n      },\n    });\n\n    console.log('Generated images:', response.data);\n\n    // Оновлюємо завдання із отриманими даними\n    const updatedTask = {\n      ...task,\n      dimension,\n      flow,\n      style,\n      manual_prompts: manualPrompts,\n      genPerRef,\n      images: selectedImage ? [...(task.images || []), selectedImage] : task.images,\n    };\n\n    onSave(updatedTask); // Зберігаємо оновлені дані завдання\n  } catch (error) {\n    console.error('Error generating images:', error);\n\n    // Оновлюємо завдання навіть у випадку помилки, щоб зберегти вибране фото\n    const updatedTask = {\n      ...task,\n      dimension,\n      flow,\n      style,\n      manual_prompts: manualPrompts,\n      genPerRef,\n      images: selectedImage ? [...(task.images || []), selectedImage] : task.images,\n      text\n    };\n\n    onSave(updatedTask); // Зберігаємо дані, навіть якщо API-запит не вдався\n  } finally {\n    onClose(); // Закриваємо модальне вікно незалежно від результату\n  }\n};\n\n\n  const handleImageUpload = (e) => {\n    const file = e.target.files[0];\n    if (file && ['image/png', 'image/jpg', 'image/jpeg'].includes(file.type)) {\n      const fileName = file.name;\n      setSelectedImage(fileName);\n      setImagePreview(URL.createObjectURL(file)); // Generate preview\n\n      // Update the image list and preview\n      if (selectedImage && task.images.includes(selectedImage)) {\n        const updatedImages = task.images.map(img => img === selectedImage ? fileName : img);\n        onSave({\n          ...task,\n          images: updatedImages\n        });\n      }\n    }\n  };\n\n  const handleImageRemove = () => {\n    if (selectedImage) {\n      const updatedImages = (task.images || []).filter(img => img !== selectedImage);\n      setSelectedImage('');\n      setImagePreview(null);\n      onSave({\n        ...task,\n        images: updatedImages\n      });\n    }\n  };\n\n  const handleImageSelectionChange = (e) => {\n    const imageName = e.target.value;\n    setSelectedImage(imageName);\n    if (imageName && task.images.includes(imageName)) {\n      setImagePreview(null); // Clear preview if an existing image is selected\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"modal-overlay\">\n      <div className=\"modal-content\">\n        <button className=\"modal-close\" id='close-modal-button' onClick={onClose}>\n          <AiOutlineClose />\n        </button>\n        <h2>{task ? task.task_name : 'Add New Task'}</h2>\n        <div>\n            <label>Text:</label>\n            <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} />\n          </div>\n        <div>\n          <label>\n            Dimension:\n            <select value={dimension} onChange={(e) => setDimension(e.target.value)}>\n              <option value=\"1x1\">1x1</option>\n              <option value=\"9x16\">9x16</option>\n              <option value=\"16x9\">16x9</option>\n            </select>\n          </label>\n        </div>\n        <div>\n          <label>\n            Flow:\n            <select value={flow} onChange={(e) => setFlow(e.target.value)}>\n              <option value=\"other_models_mix\">Other Models Mix</option>\n              <option value=\"mj_model\">MJ Model</option>\n            </select>\n          </label>\n        </div>\n        <div>\n          <label>\n            Select Image Layer:\n            <select\n              value={selectedImage || ''}\n              onChange={handleImageSelectionChange}\n            >\n              <option value=\"\">New image</option>\n              {(task.images || []).map((image, index) => (\n                <option key={index} value={image}>{image}</option>\n              ))}\n            </select>\n          </label>\n          <input type=\"file\" accept=\".png,.jpg,.jpeg\" onChange={handleImageUpload} />\n          {selectedImage && (\n            <div className=\"image-preview\">\n              {imagePreview && <img src={imagePreview} alt=\"Selected\" className=\"preview-box\" />}\n              <button onClick={handleImageRemove}>Remove Image</button>\n            </div>\n          )}\n        </div>\n        <div>\n          <label>\n            Manual Prompts:<br />\n            <textarea value={manualPrompts} onChange={(e) => setManualPrompts(e.target.value)} />\n          </label>\n        </div>\n        <div>\n          <label>\n            Generatios per ref:\n            <input type=\"number\" value={genPerRef} onChange={(e) => setGenPerRef(Number(e.target.value))} />\n          </label>\n        </div>\n        <div>\n          <label>\n            Style:\n            <select value={style} onChange={(e) => setStyle(e.target.value)}>\n              <option value=\"An ultra-realistic photography\">An ultra-realistic photography</option>\n              <option value=\"Anime style\">Anime style</option>\n            </select>\n          </label>\n        </div>\n        \n        <button onClick={handleGenerate}>Generate</button>\n      </div>\n    </div>\n  );\n};\n\nTaskModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  task: PropTypes.object,\n  onSave: PropTypes.func.isRequired,\n};\n\nexport default TaskModal;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}