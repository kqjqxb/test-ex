{"ast":null,"code":"// import React, { useState } from 'react';\n// import TaskModal from './TaskModal';\n// import '../TaskTable.css';\n// import '../tailwind.css';\n// import { CiTextAlignLeft } from \"react-icons/ci\";\n// import { PiCursorLight } from \"react-icons/pi\";\n// import { MdGrid3X3 } from \"react-icons/md\";\n// import { RxLetterCaseUppercase } from \"react-icons/rx\";\n// const TaskTable = ({ tasks, handleGenerate, handleUpdateTask }) => {\n//   const [selectedTask, setSelectedTask] = useState(null);\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n//   const handleRowClick = (task) => {\n//     setSelectedTask(task);\n//     setIsModalOpen(true);\n//   };\n//   const handleModalSave = (updatedTask) => {\n//     handleUpdateTask(updatedTask);\n//     setIsModalOpen(false);\n//   };\n//   return (\n//     <>\n//       <table className=\"task-table\">\n//         <thead>\n//           <tr>\n//             <th><RxLetterCaseUppercase />Task Name</th>\n//             <th>Dimension</th>\n//             <th>Template ID</th>\n//             <th className=\"justify-between flex-1\"><CiTextAlignLeft className='ml-4' /><span>Images</span></th>\n//             <th className=\"justify-between flex-1\"><CiTextAlignLeft className='ml-4' /><span>Text</span></th>\n//             <th><MdGrid3X3 />Amount</th>\n//             <th>Gen Type</th>\n//             <th className=\"justify-between flex-1\"><PiCursorLight />Gen Tasks</th>\n//             <th>Result Ads</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {tasks.map((task) => (\n//             <tr key={task.task_name}>\n//               <td\n//                 onClick={() => handleRowClick(task)}\n//                 style={{ cursor: 'pointer' }}\n//               >\n//                 {task.task_name}\n//               </td>\n//               <td>{task.dimension || 'Not Set'}</td>\n//               <td>{task.template_id || 'N/A'}</td>\n//               <td>\n//                 {task.images && task.images.length > 0 ? (\n//                   task.images.join(', ')\n//                 ) : (\n//                   'No images'\n//                 )}\n//               </td>\n//               <td>{task.text || 'N/A'}</td>\n//               <td>{task.genPerRef}</td>\n//               <td>{task.gen_type || 'N/A'}</td>\n//               <td>\n//                 <button\n//                   className=\"bg-yellow-100 text-black-400 px-3 py-1 rounded\"\n//                   onClick={() => handleGenerate(task)}\n//                 >\n//                   Generate\n//                 </button>\n//               </td>\n//               <td>\n//                 <a\n//                   href={`https://testapi-jvqis72guq-lm.a.run.app/test_vidro/${task.task_name}_${task.dimension}/format_validation`}\n//                   target=\"_blank\"\n//                   rel=\"noopener noreferrer\"\n//                   className=\"bg-green-200 px-3 py-1 rounded\"\n//                 >\n//                   View Results\n//                 </a>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//       {selectedTask && (\n//         <TaskModal\n//           isOpen={isModalOpen}\n//           onClose={() => setIsModalOpen(false)}\n//           task={selectedTask}\n//           onSave={handleModalSave}\n//         />\n//       )}\n//     </>\n//   );\n// };\n// export default TaskTable;\n//--------------------------------------------------------------------------------------------\n//першочергове\n// import React, { useEffect, useState } from 'react';\n// import '../TaskTable.css';\n// import '../tailwind.css';\n// import { CiTextAlignLeft } from \"react-icons/ci\";\n// import { PiCursorLight } from \"react-icons/pi\";\n// import { MdGrid3X3 } from \"react-icons/md\";\n// import { RxLetterCaseUppercase } from \"react-icons/rx\";\n// const dimensionOptions = ['1x1', '9x16', '16x9'];\n// const genTypeOptions = ['random_generation', 'cyclic_generation'];\n// const TaskTable = ({ tasks, handleGenerate, handleRowClick, handleUpdateTask }) => {\n//   const [count, setCount] = useState(0);\n//   const [sum, setSum] = useState(0);\n//   const [unique, setUnique] = useState(0);\n//   const [editingTask, setEditingTask] = useState(null);\n//   const [showDimensionOptions, setShowDimensionOptions] = useState(false);\n//   const [showGenTypeOptions, setShowGenTypeOptions] = useState(false);\n//   useEffect(() => {\n//     setCount(tasks.length);\n//     setSum(tasks.reduce((total, task) => total + task.genPerRef, 0));\n//     setUnique(tasks.filter(task => task.gen_type === 'cyclic_generation').length);\n//   }, [tasks]);\n//   const handleDimensionChange = (dimension, task) => {\n//     const updatedTask = { ...task, dimension };\n//     handleUpdateTask(updatedTask);\n//     setEditingTask(null);\n//     setShowDimensionOptions(false);\n//   };\n//   const handleGenTypeChange = (gen_type, task) => {\n//     const updatedTask = { ...task, gen_type };\n//     handleUpdateTask(updatedTask);\n//     setEditingTask(null);\n//     setShowGenTypeOptions(false);\n//   };\n//   return (\n//     <table className=\"task-table\">\n//       <thead>\n//         <tr>\n//           <th><RxLetterCaseUppercase />Task Name</th>\n//           <th>Dimension</th>\n//           <th>Template ID</th>\n//           <th className=\"justify-between flex-1  \"><CiTextAlignLeft className='ml-4'/><span >Images</span></th>\n//           <th className=\"justify-between flex-1 \"><CiTextAlignLeft className='ml-4'/><span >Text</span></th>\n//           <th><MdGrid3X3 />Amount</th>\n//           <th>Gen Type</th>\n//           <th className=\"justify-between flex-1\" > <PiCursorLight />Gen Tasks</th>\n//           <th>Result Ads</th>\n//         </tr>\n//       </thead>\n//       <tbody>\n//         <tr style={{ backgroundColor: '#f7f7f7', textAlign: 'right' }}>\n//           <td style={{textAlign: 'right' }} >\n//             <span>Count</span> <b>{count}</b>\n//           </td>\n//           <td colSpan=\"4\" style={{textAlign: 'right' }}></td>\n//           <td>\n//             <span>Sum</span> <b> {sum}</b></td>\n//           <td ><span >Unique</span> <b> {unique}</b> </td>\n//           <td colSpan=\"2\" style={{textAlign: 'right' }}></td>\n//         </tr>\n//         {Array.isArray(tasks) && tasks.map((task) => (\n//           <tr key={task.task_name}>\n//             <td onClick={() => handleRowClick(task)} style={{ cursor: 'pointer' }}>\n//               {task.task_name}\n//             </td>\n//             <td onClick={(e) => { e.stopPropagation(); setEditingTask(task); setShowDimensionOptions(true); }}>\n//               <span className='bg-purple-200 text-black text-center items-center text-xs rounded-lg px-2 py-1' style={{cursor: 'pointer'}}>\n//                 {task.dimension}\n//               </span>\n//               {editingTask === task && showDimensionOptions && (\n//                 <div className=\"dropdown\">\n//                   {dimensionOptions.map(option => (\n//                     <div\n//                       key={option}\n//                       className=\"dropdown-item\"\n//                       onClick={() => handleDimensionChange(option, task)}\n//                     >\n//                       {option}\n//                     </div>\n//                   ))}\n//                 </div>\n//               )}\n//             </td>\n//             <td><span className=\"bg-pink-300 text-clack px-2 py-1 rounded-xl\" >{task.template_id}</span></td>\n//             <td>\n// {task.image_layers.map((image, index) => (\n//   <div key={index} className=\"bg-gray-200 p-2 rounded mb-1\">\n//     {image}\n//   </div>\n// ))}\n//             </td>\n//             <td>{task.text_layers.join(', ')}</td>\n//             <td>{task.genPerRef}</td>\n//             <td onClick={(e) => { e.stopPropagation(); setEditingTask(task); setShowGenTypeOptions(true); }}>\n//               <span className=\"bg-orange-300 text-black px-2 py-1 rounded-xl\" style={{cursor: 'pointer'}}>\n//                 {task.gen_type}\n//               </span>\n//               {editingTask === task && showGenTypeOptions && (\n//                 <div className=\"dropdown\">\n//                   {genTypeOptions.map(option => (\n//                     <div\n//                       key={option}\n//                       className=\"dropdown-item\"\n//                       onClick={() => handleGenTypeChange(option, task)}\n//                     >\n//                       {option}\n//                     </div>\n//                   ))}\n//                 </div>\n//               )}\n//             </td>\n//             <td>\n//               <button className=\"bg-yellow-100 text-black-400 px-3 py-1 rounded\" onClick={(e) => { e.stopPropagation(); handleGenerate(task); }}>Generate</button>\n//             </td>\n//             <td>\n//               <a\n//                 href={`https://testapi-jvqis72guq-lm.a.run.app/test_vidro/${task.task_name}_${task.dimension}/format_validation`}\n//                 target=\"_blank\"\n//                 rel=\"noopener noreferrer\"\n//                 onClick={(e) => e.stopPropagation()}\n//                 className=\"bg-green-200 px-3 py-1 rounded\"\n//               >\n//                 View Results\n//               </a>\n//             </td>\n//           </tr>\n//         ))}\n//       </tbody>\n//     </table>\n//   );\n// };\n// export default TaskTable;\n//--------------------------------------------------------------------------------------------\nimport React,{useEffect,useState}from'react';import TaskModal from'./TaskModal';import'../TaskTable.css';import'../tailwind.css';import{CiTextAlignLeft}from\"react-icons/ci\";import{PiCursorLight}from\"react-icons/pi\";import{MdGrid3X3}from\"react-icons/md\";import{RxLetterCaseUppercase}from\"react-icons/rx\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const dimensionOptions=['1x1','9x16','16x9'];const genTypeOptions=['random_generation','cyclic_generation'];const TaskTable=_ref=>{let{tasks,handleGenerate,handleUpdateTask}=_ref;const[selectedTask,setSelectedTask]=useState(null);const[isModalOpen,setIsModalOpen]=useState(false);const[count,setCount]=useState(0);const[sum,setSum]=useState(0);const[unique,setUnique]=useState(0);const[editingTask,setEditingTask]=useState(null);const[showDimensionOptions,setShowDimensionOptions]=useState(false);const[showGenTypeOptions,setShowGenTypeOptions]=useState(false);useEffect(()=>{setCount(tasks.length);setSum(tasks.reduce((total,task)=>total+task.genPerRef,0));setUnique(tasks.filter(task=>task.gen_type==='cyclic_generation').length);},[tasks]);const handleRowClick=task=>{setSelectedTask(task);setIsModalOpen(true);};const handleModalSave=updatedTask=>{handleUpdateTask(updatedTask);setIsModalOpen(false);};const handleDimensionChange=(dimension,task)=>{const updatedTask={...task,dimension};handleUpdateTask(updatedTask);setEditingTask(null);setShowDimensionOptions(false);};const handleGenTypeChange=(gen_type,task)=>{const updatedTask={...task,gen_type};handleUpdateTask(updatedTask);setEditingTask(null);setShowGenTypeOptions(false);};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"table\",{className:\"task-table\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsxs(\"th\",{className:\"flex items-center space-x-1 whitespace-nowrap\",children:[/*#__PURE__*/_jsx(RxLetterCaseUppercase,{className:\"mr-1 my-3\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Task Name\"})]}),/*#__PURE__*/_jsx(\"th\",{className:\"whitespace-nowrap\",children:\"Dimension\"}),/*#__PURE__*/_jsx(\"th\",{className:\"whitespace-nowrap\",children:\"Template ID\"}),/*#__PURE__*/_jsxs(\"th\",{className:\"flex items-center space-x-1 whitespace-nowrap\",children:[/*#__PURE__*/_jsx(CiTextAlignLeft,{className:\"mr-1 my-3\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Images\"})]}),/*#__PURE__*/_jsx(\"th\",{className:\" items-center space-x-1 whitespace-nowrap mx-5\",children:/*#__PURE__*/_jsxs(\"span\",{className:\"flex\",children:[/*#__PURE__*/_jsx(CiTextAlignLeft,{className:\"mr-2 mt-1 flex-row\"}),\"Text\"]})}),/*#__PURE__*/_jsxs(\"th\",{className:\"flex items-center space-x-1 whitespace-nowrap\",children:[/*#__PURE__*/_jsx(MdGrid3X3,{className:\"mr-1 my-3\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Amount\"})]}),/*#__PURE__*/_jsx(\"th\",{className:\"whitespace-nowrap\",children:\"Gen Type\"}),/*#__PURE__*/_jsxs(\"th\",{className:\"flex items-center space-x-1 whitespace-nowrap\",children:[/*#__PURE__*/_jsx(PiCursorLight,{className:\"mr-1 my-3\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Gen Tasks\"})]}),/*#__PURE__*/_jsx(\"th\",{className:\"whitespace-nowrap text-center\",children:\"Result Ads\"})]})}),/*#__PURE__*/_jsxs(\"tbody\",{children:[/*#__PURE__*/_jsxs(\"tr\",{style:{backgroundColor:'#f7f7f7',textAlign:'right'},children:[/*#__PURE__*/_jsxs(\"td\",{style:{textAlign:'center'},children:[/*#__PURE__*/_jsx(\"span\",{children:\"Count\"}),\" \",/*#__PURE__*/_jsx(\"b\",{children:count})]}),/*#__PURE__*/_jsx(\"td\",{colSpan:\"4\",style:{textAlign:'right'}}),/*#__PURE__*/_jsxs(\"td\",{children:[/*#__PURE__*/_jsx(\"span\",{children:\"Sum\"}),\" \",/*#__PURE__*/_jsxs(\"b\",{children:[\" \",sum]})]}),/*#__PURE__*/_jsxs(\"td\",{children:[/*#__PURE__*/_jsx(\"span\",{children:\"Unique\"}),\" \",/*#__PURE__*/_jsxs(\"b\",{children:[\" \",unique]}),\" \"]}),/*#__PURE__*/_jsx(\"td\",{colSpan:\"2\",style:{textAlign:'right'}})]}),tasks.map(task=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{onClick:()=>handleRowClick(task),style:{cursor:'pointer'},children:task.task_name}),/*#__PURE__*/_jsxs(\"td\",{onClick:e=>{e.stopPropagation();setEditingTask(task);setShowDimensionOptions(true);},children:[/*#__PURE__*/_jsx(\"span\",{className:\"bg-purple-200 text-black text-center items-center text-xs rounded-lg px-2 py-1\",style:{cursor:'pointer'},children:task.dimension}),editingTask===task&&showDimensionOptions&&/*#__PURE__*/_jsx(\"div\",{className:\"dropdown\",children:dimensionOptions.map(option=>/*#__PURE__*/_jsx(\"div\",{className:\"dropdown-item\",onClick:()=>handleDimensionChange(option,task),children:option},option))})]}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"span\",{className:\"bg-pink-300 text-clack px-2 py-1 rounded-xl\",children:task.template_id})}),/*#__PURE__*/_jsx(\"td\",{children:task.images?task.images.map((image,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"bg-gray-200 p-2 rounded mb-1\",children:image},index)):/*#__PURE__*/_jsx(\"div\",{children:\" \"})}),/*#__PURE__*/_jsx(\"td\",{children:task.text||' '}),/*#__PURE__*/_jsx(\"td\",{children:task.genPerRef}),/*#__PURE__*/_jsxs(\"td\",{onClick:e=>{e.stopPropagation();setEditingTask(task);setShowGenTypeOptions(true);},children:[/*#__PURE__*/_jsx(\"span\",{className:\"bg-orange-300 text-black px-2 py-1 rounded-xl\",style:{cursor:'pointer'},children:task.gen_type}),editingTask===task&&showGenTypeOptions&&/*#__PURE__*/_jsx(\"div\",{className:\"dropdown\",children:genTypeOptions.map(option=>/*#__PURE__*/_jsx(\"div\",{className:\"dropdown-item\",onClick:()=>handleGenTypeChange(option,task),children:option},option))})]}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"button\",{className:\"bg-yellow-100 text-black-400 px-3 py-1 rounded\",onClick:()=>handleGenerate(task),children:\"Generate\"})}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"a\",{href:`https://testapi-jvqis72guq-lm.a.run.app/test_vidro/${task.task_name}_${task.dimension}/format_validation`,target:\"_blank\",rel:\"noopener noreferrer\",className:\"bg-green-200 px-3 py-1 rounded\",children:\"View Results\"})})]},task.task_name))]})]}),selectedTask&&/*#__PURE__*/_jsx(TaskModal,{isOpen:isModalOpen,onClose:()=>setIsModalOpen(false),task:selectedTask,onSave:handleModalSave})]});};export default TaskTable;","map":{"version":3,"names":["React","useEffect","useState","TaskModal","CiTextAlignLeft","PiCursorLight","MdGrid3X3","RxLetterCaseUppercase","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","dimensionOptions","genTypeOptions","TaskTable","_ref","tasks","handleGenerate","handleUpdateTask","selectedTask","setSelectedTask","isModalOpen","setIsModalOpen","count","setCount","sum","setSum","unique","setUnique","editingTask","setEditingTask","showDimensionOptions","setShowDimensionOptions","showGenTypeOptions","setShowGenTypeOptions","length","reduce","total","task","genPerRef","filter","gen_type","handleRowClick","handleModalSave","updatedTask","handleDimensionChange","dimension","handleGenTypeChange","children","className","style","backgroundColor","textAlign","colSpan","map","onClick","cursor","task_name","e","stopPropagation","option","template_id","images","image","index","text","href","target","rel","isOpen","onClose","onSave"],"sources":["/Users/mmaksim/test-ex/src/components/TaskTable.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import TaskModal from './TaskModal';\n// import '../TaskTable.css';\n// import '../tailwind.css';\n// import { CiTextAlignLeft } from \"react-icons/ci\";\n// import { PiCursorLight } from \"react-icons/pi\";\n// import { MdGrid3X3 } from \"react-icons/md\";\n// import { RxLetterCaseUppercase } from \"react-icons/rx\";\n\n// const TaskTable = ({ tasks, handleGenerate, handleUpdateTask }) => {\n//   const [selectedTask, setSelectedTask] = useState(null);\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n\n//   const handleRowClick = (task) => {\n//     setSelectedTask(task);\n//     setIsModalOpen(true);\n//   };\n\n//   const handleModalSave = (updatedTask) => {\n//     handleUpdateTask(updatedTask);\n//     setIsModalOpen(false);\n//   };\n\n//   return (\n//     <>\n//       <table className=\"task-table\">\n//         <thead>\n//           <tr>\n//             <th><RxLetterCaseUppercase />Task Name</th>\n//             <th>Dimension</th>\n//             <th>Template ID</th>\n//             <th className=\"justify-between flex-1\"><CiTextAlignLeft className='ml-4' /><span>Images</span></th>\n//             <th className=\"justify-between flex-1\"><CiTextAlignLeft className='ml-4' /><span>Text</span></th>\n//             <th><MdGrid3X3 />Amount</th>\n//             <th>Gen Type</th>\n//             <th className=\"justify-between flex-1\"><PiCursorLight />Gen Tasks</th>\n//             <th>Result Ads</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {tasks.map((task) => (\n//             <tr key={task.task_name}>\n//               <td\n//                 onClick={() => handleRowClick(task)}\n//                 style={{ cursor: 'pointer' }}\n//               >\n//                 {task.task_name}\n//               </td>\n//               <td>{task.dimension || 'Not Set'}</td>\n//               <td>{task.template_id || 'N/A'}</td>\n//               <td>\n//                 {task.images && task.images.length > 0 ? (\n//                   task.images.join(', ')\n//                 ) : (\n//                   'No images'\n//                 )}\n//               </td>\n//               <td>{task.text || 'N/A'}</td>\n//               <td>{task.genPerRef}</td>\n//               <td>{task.gen_type || 'N/A'}</td>\n//               <td>\n//                 <button\n//                   className=\"bg-yellow-100 text-black-400 px-3 py-1 rounded\"\n//                   onClick={() => handleGenerate(task)}\n//                 >\n//                   Generate\n//                 </button>\n//               </td>\n//               <td>\n//                 <a\n//                   href={`https://testapi-jvqis72guq-lm.a.run.app/test_vidro/${task.task_name}_${task.dimension}/format_validation`}\n//                   target=\"_blank\"\n//                   rel=\"noopener noreferrer\"\n//                   className=\"bg-green-200 px-3 py-1 rounded\"\n//                 >\n//                   View Results\n//                 </a>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n\n//       {selectedTask && (\n//         <TaskModal\n//           isOpen={isModalOpen}\n//           onClose={() => setIsModalOpen(false)}\n//           task={selectedTask}\n//           onSave={handleModalSave}\n//         />\n//       )}\n//     </>\n//   );\n// };\n\n// export default TaskTable;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//--------------------------------------------------------------------------------------------\n\n//першочергове\n\n\n\n\n// import React, { useEffect, useState } from 'react';\n// import '../TaskTable.css';\n// import '../tailwind.css';\n// import { CiTextAlignLeft } from \"react-icons/ci\";\n// import { PiCursorLight } from \"react-icons/pi\";\n// import { MdGrid3X3 } from \"react-icons/md\";\n// import { RxLetterCaseUppercase } from \"react-icons/rx\";\n\n// const dimensionOptions = ['1x1', '9x16', '16x9'];\n// const genTypeOptions = ['random_generation', 'cyclic_generation'];\n\n// const TaskTable = ({ tasks, handleGenerate, handleRowClick, handleUpdateTask }) => {\n//   const [count, setCount] = useState(0);\n//   const [sum, setSum] = useState(0);\n//   const [unique, setUnique] = useState(0);\n//   const [editingTask, setEditingTask] = useState(null);\n//   const [showDimensionOptions, setShowDimensionOptions] = useState(false);\n//   const [showGenTypeOptions, setShowGenTypeOptions] = useState(false);\n\n//   useEffect(() => {\n//     setCount(tasks.length);\n//     setSum(tasks.reduce((total, task) => total + task.genPerRef, 0));\n//     setUnique(tasks.filter(task => task.gen_type === 'cyclic_generation').length);\n//   }, [tasks]);\n\n//   const handleDimensionChange = (dimension, task) => {\n//     const updatedTask = { ...task, dimension };\n//     handleUpdateTask(updatedTask);\n//     setEditingTask(null);\n//     setShowDimensionOptions(false);\n//   };\n\n//   const handleGenTypeChange = (gen_type, task) => {\n//     const updatedTask = { ...task, gen_type };\n//     handleUpdateTask(updatedTask);\n//     setEditingTask(null);\n//     setShowGenTypeOptions(false);\n//   };\n\n//   return (\n//     <table className=\"task-table\">\n//       <thead>\n//         <tr>\n//           <th><RxLetterCaseUppercase />Task Name</th>\n//           <th>Dimension</th>\n//           <th>Template ID</th>\n//           <th className=\"justify-between flex-1  \"><CiTextAlignLeft className='ml-4'/><span >Images</span></th>\n//           <th className=\"justify-between flex-1 \"><CiTextAlignLeft className='ml-4'/><span >Text</span></th>\n//           <th><MdGrid3X3 />Amount</th>\n//           <th>Gen Type</th>\n//           <th className=\"justify-between flex-1\" > <PiCursorLight />Gen Tasks</th>\n//           <th>Result Ads</th>\n//         </tr>\n//       </thead>\n//       <tbody>\n//         <tr style={{ backgroundColor: '#f7f7f7', textAlign: 'right' }}>\n//           <td style={{textAlign: 'right' }} >\n//             <span>Count</span> <b>{count}</b>\n//           </td>\n//           <td colSpan=\"4\" style={{textAlign: 'right' }}></td>\n//           <td>\n//             <span>Sum</span> <b> {sum}</b></td>\n//           <td ><span >Unique</span> <b> {unique}</b> </td>\n//           <td colSpan=\"2\" style={{textAlign: 'right' }}></td>\n//         </tr>\n//         {Array.isArray(tasks) && tasks.map((task) => (\n//           <tr key={task.task_name}>\n//             <td onClick={() => handleRowClick(task)} style={{ cursor: 'pointer' }}>\n//               {task.task_name}\n//             </td>\n//             <td onClick={(e) => { e.stopPropagation(); setEditingTask(task); setShowDimensionOptions(true); }}>\n//               <span className='bg-purple-200 text-black text-center items-center text-xs rounded-lg px-2 py-1' style={{cursor: 'pointer'}}>\n//                 {task.dimension}\n//               </span>\n//               {editingTask === task && showDimensionOptions && (\n//                 <div className=\"dropdown\">\n//                   {dimensionOptions.map(option => (\n//                     <div\n//                       key={option}\n//                       className=\"dropdown-item\"\n//                       onClick={() => handleDimensionChange(option, task)}\n//                     >\n//                       {option}\n//                     </div>\n//                   ))}\n//                 </div>\n//               )}\n//             </td>\n//             <td><span className=\"bg-pink-300 text-clack px-2 py-1 rounded-xl\" >{task.template_id}</span></td>\n//             <td>\n              // {task.image_layers.map((image, index) => (\n              //   <div key={index} className=\"bg-gray-200 p-2 rounded mb-1\">\n              //     {image}\n              //   </div>\n              // ))}\n//             </td>\n//             <td>{task.text_layers.join(', ')}</td>\n//             <td>{task.genPerRef}</td>\n//             <td onClick={(e) => { e.stopPropagation(); setEditingTask(task); setShowGenTypeOptions(true); }}>\n//               <span className=\"bg-orange-300 text-black px-2 py-1 rounded-xl\" style={{cursor: 'pointer'}}>\n//                 {task.gen_type}\n//               </span>\n//               {editingTask === task && showGenTypeOptions && (\n//                 <div className=\"dropdown\">\n//                   {genTypeOptions.map(option => (\n//                     <div\n//                       key={option}\n//                       className=\"dropdown-item\"\n//                       onClick={() => handleGenTypeChange(option, task)}\n//                     >\n//                       {option}\n//                     </div>\n//                   ))}\n//                 </div>\n//               )}\n//             </td>\n//             <td>\n//               <button className=\"bg-yellow-100 text-black-400 px-3 py-1 rounded\" onClick={(e) => { e.stopPropagation(); handleGenerate(task); }}>Generate</button>\n//             </td>\n//             <td>\n//               <a\n//                 href={`https://testapi-jvqis72guq-lm.a.run.app/test_vidro/${task.task_name}_${task.dimension}/format_validation`}\n//                 target=\"_blank\"\n//                 rel=\"noopener noreferrer\"\n//                 onClick={(e) => e.stopPropagation()}\n//                 className=\"bg-green-200 px-3 py-1 rounded\"\n//               >\n//                 View Results\n//               </a>\n//             </td>\n//           </tr>\n//         ))}\n//       </tbody>\n//     </table>\n//   );\n// };\n\n// export default TaskTable;\n\n\n//--------------------------------------------------------------------------------------------\n\n\n\n\n\n\n\n\n\n\n\nimport React, { useEffect, useState } from 'react';\nimport TaskModal from './TaskModal';\nimport '../TaskTable.css';\nimport '../tailwind.css';\nimport { CiTextAlignLeft } from \"react-icons/ci\";\nimport { PiCursorLight } from \"react-icons/pi\";\nimport { MdGrid3X3 } from \"react-icons/md\";\nimport { RxLetterCaseUppercase } from \"react-icons/rx\";\n\nconst dimensionOptions = ['1x1', '9x16', '16x9'];\nconst genTypeOptions = ['random_generation', 'cyclic_generation'];\n\n\n\nconst TaskTable = ({ tasks, handleGenerate, handleUpdateTask }) => {\n  const [selectedTask, setSelectedTask] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const [count, setCount] = useState(0);\nconst [sum, setSum] = useState(0);\nconst [unique, setUnique] = useState(0);\nconst [editingTask, setEditingTask] = useState(null);\nconst [showDimensionOptions, setShowDimensionOptions] = useState(false);\nconst [showGenTypeOptions, setShowGenTypeOptions] = useState(false);\n\n\nuseEffect(() => {\n  setCount(tasks.length);\n  setSum(tasks.reduce((total, task) => total + task.genPerRef, 0));\n  setUnique(tasks.filter(task => task.gen_type === 'cyclic_generation').length);\n}, [tasks]);\n\n  const handleRowClick = (task) => {\n    setSelectedTask(task);\n    setIsModalOpen(true);\n  };\n\n  const handleModalSave = (updatedTask) => {\n    handleUpdateTask(updatedTask); \n    setIsModalOpen(false);\n  };\n  \n\n  const handleDimensionChange = (dimension, task) => {\n    const updatedTask = { ...task, dimension };\n    handleUpdateTask(updatedTask);\n    setEditingTask(null);\n    setShowDimensionOptions(false);\n  };\n\n  const handleGenTypeChange = (gen_type, task) => {\n    const updatedTask = { ...task, gen_type };\n    handleUpdateTask(updatedTask);\n    setEditingTask(null);\n    setShowGenTypeOptions(false);\n  };\n\n  return (\n    <>\n      <table className=\"task-table\">\n        <thead>\n  <tr >\n    <th className=\"flex items-center space-x-1 whitespace-nowrap\">\n      <RxLetterCaseUppercase className=\"mr-1 my-3\" />\n      <span>Task Name</span>\n    </th>\n    <th className=\"whitespace-nowrap\">\n      Dimension\n    </th>\n    <th className=\"whitespace-nowrap\">\n      Template ID\n    </th>\n    <th className=\"flex items-center space-x-1 whitespace-nowrap\">\n      <CiTextAlignLeft className=\"mr-1 my-3\" />\n      <span>Images</span>\n    </th>\n    <th className=\" items-center space-x-1 whitespace-nowrap mx-5\">\n      \n      <span className='flex'><CiTextAlignLeft className=\"mr-2 mt-1 flex-row\" />Text</span>\n    </th>\n    <th className=\"flex items-center space-x-1 whitespace-nowrap\">\n      <MdGrid3X3 className=\"mr-1 my-3\" />\n      <span>Amount</span>\n    </th>\n    <th className=\"whitespace-nowrap\">\n      Gen Type\n    </th>\n    <th className=\"flex items-center space-x-1 whitespace-nowrap\">\n      <PiCursorLight className=\"mr-1 my-3\" />\n      <span>Gen Tasks</span>\n    </th>\n    <th className=\"whitespace-nowrap text-center\">\n      Result Ads\n    </th>\n  </tr>\n</thead>\n\n        <tbody>\n        <tr style={{ backgroundColor: '#f7f7f7', textAlign: 'right' }}>\n          <td style={{textAlign: 'center' }} >\n            <span>Count</span> <b>{count}</b>\n          </td>\n          <td colSpan=\"4\" style={{textAlign: 'right' }}></td>\n          <td>\n            <span>Sum</span> <b> {sum}</b></td>\n          <td ><span >Unique</span> <b> {unique}</b> </td>\n          <td colSpan=\"2\" style={{textAlign: 'right' }}></td>\n        </tr>\n          {tasks.map((task) => (\n            <tr key={task.task_name}>\n              <td\n                onClick={() => handleRowClick(task)}\n                style={{ cursor: 'pointer' }}\n              >\n                {task.task_name}\n              </td>\n              <td onClick={(e) => { e.stopPropagation(); setEditingTask(task); setShowDimensionOptions(true); }}>\n              <span className='bg-purple-200 text-black text-center items-center text-xs rounded-lg px-2 py-1' style={{cursor: 'pointer'}}>\n                {task.dimension}\n              </span>\n              {editingTask === task && showDimensionOptions && (\n                <div className=\"dropdown\">\n                  {dimensionOptions.map(option => (\n                    <div\n                      key={option}\n                      className=\"dropdown-item\"\n                      onClick={() => handleDimensionChange(option, task)}\n                    >\n                      {option}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </td>\n            <td><span className=\"bg-pink-300 text-clack px-2 py-1 rounded-xl\" >{task.template_id}</span></td>\n            <td>\n  {task.images ? (\n    task.images.map((image, index) => (\n      <div key={index} className=\"bg-gray-200 p-2 rounded mb-1\">\n        {image}\n      </div>\n    ))\n  ) : (\n    <div > </div> \n  )}\n</td>\n\n              <td>{task.text || ' '}</td>\n              <td>{task.genPerRef}</td>\n              <td onClick={(e) => { e.stopPropagation(); setEditingTask(task); setShowGenTypeOptions(true); }}>\n              <span className=\"bg-orange-300 text-black px-2 py-1 rounded-xl\" style={{cursor: 'pointer'}}>\n                {task.gen_type}\n              </span>\n              {editingTask === task && showGenTypeOptions && (\n                <div className=\"dropdown\">\n                  {genTypeOptions.map(option => (\n                    <div\n                      key={option}\n                      className=\"dropdown-item\"\n                      onClick={() => handleGenTypeChange(option, task)}\n                    >\n                      {option}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </td>\n              <td>\n                <button\n                  className=\"bg-yellow-100 text-black-400 px-3 py-1 rounded\"\n                  onClick={() => handleGenerate(task)}\n                >\n                  Generate\n                </button>\n              </td>\n              <td>\n                <a\n                  href={`https://testapi-jvqis72guq-lm.a.run.app/test_vidro/${task.task_name}_${task.dimension}/format_validation`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"bg-green-200 px-3 py-1 rounded\"\n                >\n                  View Results\n                </a>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {selectedTask && (\n        <TaskModal\n          isOpen={isModalOpen}\n          onClose={() => setIsModalOpen(false)}\n          task={selectedTask}\n          onSave={handleModalSave}\n        />\n      )}\n    </>\n  );\n};\n\nexport default TaskTable;\n\n\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAeA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACc;AACA;AACA;AACA;AACA;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAYA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,CAAAC,SAAS,KAAM,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}